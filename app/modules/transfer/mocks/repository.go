// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/evandroferreiras/gopher-city-bank/app/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CommitTransaction provides a mock function with given fields: ctx
func (_m *Repository) CommitTransaction(ctx context.Context) {
	_m.Called(ctx)
}

// GetAccount provides a mock function with given fields: id
func (_m *Repository) GetAccount(id string) (model.Account, error) {
	ret := _m.Called(id)

	var r0 model.Account
	if rf, ok := ret.Get(0).(func(string) model.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDepositsTo provides a mock function with given fields: accountOriginID
func (_m *Repository) GetAllDepositsTo(accountOriginID string) ([]model.Transfer, error) {
	ret := _m.Called(accountOriginID)

	var r0 []model.Transfer
	if rf, ok := ret.Get(0).(func(string) []model.Transfer); ok {
		r0 = rf(accountOriginID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountOriginID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithdrawsOf provides a mock function with given fields: accountOriginID
func (_m *Repository) GetAllWithdrawsOf(accountOriginID string) ([]model.Transfer, error) {
	ret := _m.Called(accountOriginID)

	var r0 []model.Transfer
	if rf, ok := ret.Get(0).(func(string) []model.Transfer); ok {
		r0 = rf(accountOriginID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountOriginID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogTransfer provides a mock function with given fields: ctx, _a1
func (_m *Repository) LogTransfer(ctx context.Context, _a1 model.Transfer) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Transfer) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTransaction provides a mock function with given fields: ctx
func (_m *Repository) RollbackTransaction(ctx context.Context) {
	_m.Called(ctx)
}

// StartTransaction provides a mock function with given fields:
func (_m *Repository) StartTransaction() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountBalance provides a mock function with given fields: ctx, id, newBalance
func (_m *Repository) UpdateAccountBalance(ctx context.Context, id string, newBalance float64) error {
	ret := _m.Called(ctx, id, newBalance)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, id, newBalance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
