// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	model "github.com/evandroferreiras/gopher-city-bank/app/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: newAccount
func (_m *Repository) Create(newAccount model.Account) (model.Account, error) {
	ret := _m.Called(newAccount)

	var r0 model.Account
	if rf, ok := ret.Get(0).(func(model.Account) model.Account); ok {
		r0 = rf(newAccount)
	} else {
		r0 = ret.Get(0).(model.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Account) error); ok {
		r1 = rf(newAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: id
func (_m *Repository) GetAccount(id string) (model.Account, error) {
	ret := _m.Called(id)

	var r0 model.Account
	if rf, ok := ret.Get(0).(func(string) model.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccounts provides a mock function with given fields:
func (_m *Repository) GetAccounts() ([]model.Account, error) {
	ret := _m.Called()

	var r0 []model.Account
	if rf, ok := ret.Get(0).(func() []model.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
